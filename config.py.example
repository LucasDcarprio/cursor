# 智慧采购管理系统 - 配置文件模板
# Intelligent Procurement Management System - Configuration Template
# 
# 使用说明：
# 1. 复制此文件为 config.py
# 2. 根据您的实际环境填写配置信息
# 3. 请勿将包含敏感信息的 config.py 文件提交到版本控制系统

import os
from datetime import timedelta

class Config:
    """基础配置类"""
    
    # 应用基础配置
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'your-secret-key-change-this-in-production'
    DEBUG = False
    TESTING = False
    
    # 数据库配置
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///app.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SQLALCHEMY_ECHO = False  # 设置为 True 可以看到 SQL 语句
    
    # 会话配置
    PERMANENT_SESSION_LIFETIME = timedelta(days=7)
    SESSION_COOKIE_SECURE = False  # 生产环境设置为 True
    SESSION_COOKIE_HTTPONLY = True
    
    # 文件上传配置
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB
    UPLOAD_FOLDER = 'uploads'
    ALLOWED_EXTENSIONS = {'xlsx', 'xls', 'csv'}

class DevelopmentConfig(Config):
    """开发环境配置"""
    DEBUG = True
    SQLALCHEMY_ECHO = True

class ProductionConfig(Config):
    """生产环境配置"""
    DEBUG = False
    SESSION_COOKIE_SECURE = True
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///production.db'

class TestingConfig(Config):
    """测试环境配置"""
    TESTING = True
    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'
    WTF_CSRF_ENABLED = False

# 阿里巴巴 API 配置
# 请在阿里巴巴开放平台申请应用并获取以下信息
API_KEY = "your_alibaba_api_key"  # 阿里巴巴 API Key
API_SECRET = "your_alibaba_api_secret"  # 阿里巴巴 API Secret
API_TOKEN = "your_alibaba_api_token"  # 阿里巴巴 Access Token

# API 路径配置
API_PATHS = {
    'get_goods_info': 'com.alibaba.product/alibaba.product.get',  # 获取商品信息
    'get_address': 'com.alibaba.trade/alibaba.trade.addresscode.get',  # 获取收货地址
    'make_order': 'com.alibaba.trade/alibaba.trade.order.create',  # 创建订单
    'order_preview': 'com.alibaba.trade/alibaba.trade.order.preview',  # 订单预览
    'after_order_preview': 'com.alibaba.trade/alibaba.trade.order.detail.get',  # 订单详情
    'pay_without_password': 'com.alibaba.trade/alibaba.trade.order.pay',  # 免密支付
    'get_logistics_info': 'com.alibaba.logistics/alibaba.logistics.order.get',  # 获取物流信息
    'get_order_list': 'com.alibaba.trade/alibaba.trade.order.list.get',  # 获取订单列表
    'claim_coupon': 'com.alibaba.marketing/alibaba.marketing.coupon.claim',  # 领取优惠券
    'off_order': 'com.alibaba.trade/alibaba.trade.order.cancel'  # 取消订单
}

# 默认收货地址配置示例
ADDRESS = {
    "示例门店": {
        "addressId": 0,  # 地址ID，需要通过API获取
        "fullName": "收货人姓名",
        "mobile": "13800138000",
        "phone": "020-12345678",
        "postCode": "510000",
        "areaText": "广东省 广州市 天河区",
        "addressText": "详细地址",
        "townText": "",
        "districtCode": "440106"
    }
}

# 邮件服务配置
MAIL_CONFIG = {
    'MAIL_SERVER': 'smtp.qq.com',
    'MAIL_PORT': 465,
    'MAIL_USE_SSL': True,
    'MAIL_USERNAME': 'your_email@qq.com',  # 发送邮件的邮箱
    'MAIL_PASSWORD': 'your_smtp_password',  # SMTP 授权码（不是邮箱密码）
    'MAIL_DEFAULT_SENDER': 'your_email@qq.com'
}

# 收件人邮箱列表（用于验证码等通知）
MAIL_ADDRESS = [
    'admin1@example.com',
    'admin2@example.com',
    'manager@example.com'
]

# 日志配置
LOGGING_CONFIG = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',
        }
    },
    'handlers': {
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/app.log',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 10,
            'formatter': 'default'
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'default'
        }
    },
    'root': {
        'level': 'INFO',
        'handlers': ['file', 'console']
    }
}

# Redis 配置（如果使用缓存或任务队列）
REDIS_CONFIG = {
    'REDIS_URL': os.environ.get('REDIS_URL') or 'redis://localhost:6379/0',
    'CACHE_TYPE': 'redis',
    'CACHE_REDIS_URL': os.environ.get('REDIS_URL') or 'redis://localhost:6379/0'
}

# Celery 配置（如果使用异步任务）
CELERY_CONFIG = {
    'broker_url': os.environ.get('CELERY_BROKER_URL') or 'redis://localhost:6379/0',
    'result_backend': os.environ.get('CELERY_RESULT_BACKEND') or 'redis://localhost:6379/0',
    'task_serializer': 'json',
    'accept_content': ['json'],
    'result_serializer': 'json',
    'timezone': 'Asia/Shanghai',
    'enable_utc': True
}

# 分页配置
PAGINATION_CONFIG = {
    'PER_PAGE': 20,  # 每页显示条数
    'MAX_PER_PAGE': 100  # 每页最大条数
}

# API 限流配置
RATE_LIMIT_CONFIG = {
    'DEFAULT': "1000 per hour",
    'LOGIN': "10 per minute",
    'API': "100 per minute"
}

# 安全配置
SECURITY_CONFIG = {
    'PASSWORD_MIN_LENGTH': 8,
    'PASSWORD_REQUIRE_UPPERCASE': True,
    'PASSWORD_REQUIRE_LOWERCASE': True,
    'PASSWORD_REQUIRE_NUMBERS': True,
    'PASSWORD_REQUIRE_SYMBOLS': False,
    'LOGIN_ATTEMPTS_LIMIT': 5,
    'LOGIN_ATTEMPTS_TIMEOUT': 300  # 5分钟
}

# 根据环境变量选择配置
config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'testing': TestingConfig,
    'default': DevelopmentConfig
}

# 获取当前配置
def get_config():
    """获取当前环境的配置"""
    env = os.environ.get('FLASK_ENV', 'development')
    return config.get(env, config['default'])

# 验证配置
def validate_config():
    """验证必要的配置项是否已设置"""
    required_configs = [
        'API_KEY', 'API_SECRET', 'API_TOKEN'
    ]
    
    missing_configs = []
    for config_name in required_configs:
        if not globals().get(config_name) or globals().get(config_name).startswith('your_'):
            missing_configs.append(config_name)
    
    if missing_configs:
        print(f"警告：以下配置项需要设置：{', '.join(missing_configs)}")
        print("请编辑 config.py 文件并填入正确的配置信息")
        return False
    
    return True

# 初始化配置验证
if __name__ == '__main__':
    validate_config()